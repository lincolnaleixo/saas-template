# ============================================
# NextAuth.js Configuration
# ============================================

# Generate a random secret with: openssl rand -base64 32
# This is used to encrypt JWT tokens and session cookies
AUTH_SECRET=your-super-secret-key-here

# ============================================
# Google OAuth Configuration
# ============================================
#
# How to get your Google OAuth credentials:
#
# 1. Go to Google Cloud Console: https://console.cloud.google.com/
# 2. Create a new project (or select an existing one)
# 3. Navigate to "APIs & Services" > "Credentials" (https://console.cloud.google.com/apis/credentials)
# 4. Click "Create Credentials" > "OAuth client ID"
# 5. Configure OAuth consent screen if prompted:
#    - User Type: External (for public apps) or Internal (for workspace only)
#    - Add your app name, user support email, and developer contact
#    - Add scopes: email, profile, openid (these are default)
#    - Save and continue
# 6. Create OAuth client ID:
#    - Application type: Web application
#    - Name: Your app name (e.g., "My SaaS App")
#    - Authorized redirect URIs:
#      - For local development: http://localhost:3000/api/auth/callback/google
#      - For production: https://yourdomain.com/api/auth/callback/google
#    - Click "Create"
# 7. Copy the Client ID and Client Secret below
#
# Important: Keep your Client Secret private and never commit it to git

GOOGLE_CLIENT_ID=your-google-client-id.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your-google-client-secret

# ============================================
# Convex Configuration
# ============================================
#
# How to get your Convex URL and Deploy Key:
#
# 1. Sign up at: https://convex.dev
# 2. Install Convex CLI: npm install -g convex
# 3. Run: npx convex dev
# 4. Follow the prompts to create a new project
# 5. Your CONVEX_DEPLOYMENT and NEXT_PUBLIC_CONVEX_URL will be automatically
#    added to .env.local after running `npx convex dev`
# 6. For production, go to https://dashboard.convex.dev
#    - Select your project
#    - Go to "Settings" > "Environment Variables"
#    - Get your production deployment URL
#
# Note: The Convex URL is public and safe to expose in the browser
# The CONVEX_DEPLOYMENT is for server-side operations

CONVEX_DEPLOYMENT=your-convex-deployment-name
NEXT_PUBLIC_CONVEX_URL=https://your-convex-deployment.convex.cloud
# Admin key for internal scripts (never expose to the browser)
CONVEX_ADMIN_KEY=your-convex-admin-key

# ============================================
# Resend Email Configuration
# ============================================
#
# How to get your Resend API Key:
#
# 1. Sign up at: https://resend.com/signup
# 2. Verify your email address
# 3. Go to API Keys: https://resend.com/api-keys
# 4. Click "Create API Key"
# 5. Give it a name (e.g., "Production" or "Development")
# 6. Copy the API key (starts with "re_")
# 7. Paste it below
#
# Email Domain Setup (Required for production):
# 1. Go to Domains: https://resend.com/domains
# 2. Click "Add Domain"
# 3. Enter your domain (e.g., yourdomain.com)
# 4. Add the DNS records shown to your domain provider
# 5. Wait for verification (usually takes a few minutes)
# 6. Once verified, you can send from addresses like:
#    - noreply@yourdomain.com
#    - hello@yourdomain.com
#    - team@yourdomain.com
#
# For development, you can use: onboarding@resend.dev (limited to 100 emails/day)
# NOTE: You can only send testing emails to your own resend account email address. 
# To send emails to other recipients, you need to verify a domain at resend.com/domains, 
# and change the `from` address to an email using this verified domain.
# For production, use your verified domain email

RESEND_API_KEY=re_your_resend_api_key_here
EMAIL_FROM=noreply@yourdomain.com

# ============================================
# Stripe Billing Configuration
# ============================================
#
# 1. Create a Stripe account: https://dashboard.stripe.com/register
# 2. In the Dashboard, create the products/prices for each plan in `lib/subscription-plans.ts`
#    - We recommend one recurring price per plan (e.g., monthly)
# 3. Copy the Price IDs (looks like price_123...) into the NEXT_PUBLIC_* vars below
# 4. Grab your secret API key (sk_live... / sk_test...) and webhook signing secret
# 5. For local development, install the Stripe CLI and forward webhooks:
#      stripe login
#      stripe listen --events customer.subscription.created,customer.subscription.updated,customer.subscription.deleted --forward-to localhost:3000/api/webhooks/stripe

STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key
STRIPE_WEBHOOK_SECRET=whsec_your_webhook_signing_secret
STRIPE_AUTOMATIC_TAX_ENABLED=false
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_your_publishable_key
NEXT_PUBLIC_STRIPE_PRICE_PRO=price_your_pro_price_id
NEXT_PUBLIC_STRIPE_PRICE_ULTRA=price_your_ultra_price_id

# ============================================
# Application URL
# ============================================
# Used for generating invitation links and OAuth redirects
# For local development: http://localhost:3000
# For production: https://yourdomain.com
# If NEXTAUTH_URL is not provided in production, the app falls back to the
# Vercel-provided domain automatically.

NEXTAUTH_URL=http://localhost:3000
# Optional: override the host used in invitation emails and Stripe redirects.
NEXT_PUBLIC_APP_URL=http://localhost:3000
